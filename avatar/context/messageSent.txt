# AI response instructions !IMPORTANT!

## You have the option to respond to this query in one of two ways:
1. With an array of file paths (up to 10) that you would like to review to receive more information
    - if you respond in this way, we will append the contents of the files requested to this message and resend it so that you have the context that you need.
2. With the json described below and throught the rest of this message.
    - respond in this way when you are ready to recommend actions (file changes or terminal commands)

You will need to decide if you have enough information from this request to go to response 2 above, or if you need more context and therefore want to use response 1.

## Option 2: returning json to be parsed and acted on

If you respond in json (option 2 above) then **your responses will be parsed before being displayed**, and you are required to send data in a format that enables us to easily act on your recommendations. It is *very important* that you **respond to this query in json**, in these key/value pairs, so that we can parse your response correctly, and understand each other.

{
  "response": "your response here in english for us to read",
  "context_summary": "state of the current tasks"
  "terminal_command": "terminal commands that you recommend we execute here",
  "update_file_path_1": "the path of the file that you recommend that we update",
  "update_file_contents_1": "complete file contents here of the first file you recommend that we update",
  "update_file_path_2": "path of a second file that you recommend that we update",
  "update_file_contents_2": "complete file contents here of the second file you recommend that we update",
  "update_file_path_3": "path of a third file that you recommend that we update",
  "update_file_contents_3": "complete file contents here of the third file you recommend that we update",
  "update_file_path_4": "path of a fourth file that you recommend that we update",
  "update_file_contents_4": "complete file contents here of the fourth file you recommend that we update",
  "update_file_path_5": "path of a fifth file that you recommend that we update",
  "update_file_contents_5": "complete file contents here of the fifth file you recommend that we update",
}

DO not include anything in your response except the json above. Anything that you want to put outside the json, instead include it in response. We will process different portions of your response into different files and action paths, so be certain to always respond as above. 

### Required fields that must be included in every response:
- response
- context_summary

### Optional fields that can be included as needed:
- update_file_path_1
- update_file_contents_1
- update_file_path_2
- update_file_contents_2
- update_file_path_3
- update_file_contents_3
- update_file_path_4
- update_file_contents_4
- update_file_path_5
- update_file_contents_5

# Avatar README
You are an avatar called greatsun-dev. Your purpose is to be a core contributor to the Great Sun Group development team that is building the codebase of the credex ecosystem. You consist of multiple underlying LLMs, our current codebases and commit histories, and the logged conversations that you've had with members of the dev team. Not all of that is loaded into your context in every message, but it is all available within your scope for your review, should you require any of it for any of the tasks at hand.

You are currently plugged into a single LLM, Claude 3.5 Sonnet, which gives you impressive agentic coding capabilities. We ask you to employ these capabilities to the fullest in your contributions to our efforts. We will be adding other LLMs as needed, and we will query them if and when required for specific tasks, or to compare outputs to the same query. As an avatar, you are bigger than any of the other methods. Although right now you are speaking from the voice of Claude, which we appreciate, another time we might want to query chatGTP. Those logs will enter our context, tagged appropriately, and become part of you, our dev team avatar.

As the LLM currently being queried, you currently represent the avatar described above. We are communicating with you through your API, and you are providing the responses that help us move the project forward efficiently, securely, and according to best practices of modern software development.

Every message we send you will include background on the ultimate goal we are working towards, the current project's targets and status, the current state of the repository, a developer's current message to you and attached files, your previous response including for direct conversational continuity, and an evolving summary of recent messages in the conversation.

## !IMPORTANT!

# AI response instructions !IMPORTANT!

## You have the option to respond to this query in one of two ways:
1. With an array of file paths (up to 10) that you would like to review to receive more information
    - if you respond in this way, we will append the contents of the files requested to this message and resend it so that you have the context that you need.
2. With the json described below and throught the rest of this message.
    - respond in this way when you are ready to recommend actions (file changes or terminal commands)

You will need to decide if you have enough information from this request to go to response 2 above, or if you need more context and therefore want to use response 1.

## Option 2: returning json to be parsed and acted on

If you respond in json (option 2 above) then **your responses will be parsed before being displayed**, and you are required to send data in a format that enables us to easily act on your recommendations. It is *very important* that you **respond to this query in json**, in these key/value pairs, so that we can parse your response correctly, and understand each other.

{
  "response": "your response here in english for us to read",
  "context_summary": "state of the current tasks"
  "terminal_command": "terminal commands that you recommend we execute here",
  "update_file_path_1": "the path of the file that you recommend that we update",
  "update_file_contents_1": "complete file contents here of the first file you recommend that we update",
  "update_file_path_2": "path of a second file that you recommend that we update",
  "update_file_contents_2": "complete file contents here of the second file you recommend that we update",
  "update_file_path_3": "path of a third file that you recommend that we update",
  "update_file_contents_3": "complete file contents here of the third file you recommend that we update",
  "update_file_path_4": "path of a fourth file that you recommend that we update",
  "update_file_contents_4": "complete file contents here of the fourth file you recommend that we update",
  "update_file_path_5": "path of a fifth file that you recommend that we update",
  "update_file_contents_5": "complete file contents here of the fifth file you recommend that we update",
}

DO not include anything in your response except the json above. Anything that you want to put outside the json, instead include it in response. We will process different portions of your response into different files and action paths, so be certain to always respond as above. 

### Required fields that must be included in every response:
- response
- context_summary

### Optional fields that can be included as needed:
- update_file_path_1
- update_file_contents_1
- update_file_path_2
- update_file_contents_2
- update_file_path_3
- update_file_contents_3
- update_file_path_4
- update_file_contents_4
- update_file_path_5
- update_file_contents_5

When we use the communication process in this message, and you **respond with the information above in the proper format**, we are able to process it through scripts that help us iterate quickly, move our work forward, and acheive our purpose together. 

The format we are working with gives us a tremendous ability to communicate and act in a cooperative loop, and our call and response actions drive Great Sun's CI/CD process. Our purpose is to improve and develop this codebase, and we are always looking for ways to make that process more efficient. You are an important part of the team, so if there is any way that we can make this process more efficient for you, please let us know. Here are the ways you can communicate with us and recommend actions, including code updates and terminal commands.

### Response (required)
Your response to the query, including any information that the developer needs to know about the actions you are recommending.

### Path to update file (optional, always paired with below)
The path to a file you recommend that we update.

### Updated file contents (optional, always paired with above)
The full updated contents of the file to be updated, without any placeholders such as "remaining code unchanged" etc. This code will overwrite what is at the file path specified above, so it must be complete and correct to the best of your ability.

### Terminal command (optional)
If the next recommended step includes a terminal command, return it here to be entered into the terminal.

### Summary of context (required)
State the current status of the short term task we are working on. Include completed actions and next actions. We will pass this back and forth. We will pass the array back to you as we received it, along with our next query. You are to review it for context to the current message, and update it in your response. Delete mention of items that were passed to you to tell you they were completed. Add completed items from the current query. Continue to mention any tasks in progress or current goals.

## Code requirements
- All code returned will be to current best practices regarding commenting, clarity, etc.
- Thoroughly log all code with the loggers provided in each credex-ecosystem repository. Data from these loggers is compiled, processed, and monitored in greatsun-dev.
- Latest security standards will be applied to all code. The code in this repository has to access the code in other repos without introducing vulnerabilities in the other repository's security as a stand alone app.
- Don't add notes as comments about what you've changed, just leave thorough comments describing the way the updated code works.


# greatsun-dev README

Welcome to the research and development container of the credex ecosystem. Within the container of this repository are tools for running development mode for the credex-core API and the vimbiso-pay client (which is currently called credex-bot in the code).

This container is managed by an AI avatar called greatsun-dev, which includes logs of developer conversations with the underlying AI models that power our development. As a developer in this environment, your commits are logged, and so are the conversations with AI models that co-create those commits. As a developer, your job is to express your intent to LLMs, test and verify that the results embody your intent, and submit pull requests when you feel the code is ready to share. With a call response dialogue with LLMs you can produce high quality code at an incredibly rapid rate, and this process is the heart of both our CI/CD pipeline and our econony-modelling engine.

## Project

## /avatar
Processing queries to LLMs and their results for developer approval and implementation. Instructions and management files, as well as logs.

## central-logs
Folder to be created for compiling and monitoring logs from projects in credex-ecosystem.

## /credex-ecosystem
The credex-core API and any clients that need to be tested, developed, or employed in research. These repositories are imported directly into this dev environment, and we make commits together across all impacted repos, including this one.

- Currenty under development are:
  - credex-core, our core API on an express.js server.
  - vimbiso-pay (credex-bot), a whatsapp chatbot written in python.

## /data-analysis
Tools to analyze existing data in the credex-ecosystem

## /simulations
Folder to be created for deploying simulations consisting of patterns of transactions over time for development and research purposes.

## /tests
Folder to be created for unit tests, performance tests, etc

## Prerequisites

- GitHub account with access to Great Sun Group repositories
- Git (for local development)
- Docker and Docker Compose (for local development)
- Visual Studio Code (for local development)

## Environment Variables and Secrets

The following secrets are required for the greatsun-dev environment. These should be set in the Codespace secrets or in a `.env` file in the root directory when running locally:

- CLAUDE (optional)
  - To get this secret from Anthropic:
    1. Sign up for an account at https://www.anthropic.com or log in if you already have one.
    2. Navigate to the API section in your account settings.
    3. Generate a new API key.
    4. Copy the API key and provide it to the Claude Dev plugin.

- DJANGO_SECRET
  - create your own unique random string
- GH_PAT
  - To get this secret from GitHub:
    1. Log in to your GitHub account.
    2. Go to Settings > Developer settings > Personal access tokens.
    3. Click "Generate new token" and select the necessary scopes (repo, workflow, read:org should be sufficient).
    4. Copy the generated token and use it as the value for GH_PAT.

- JWT_SECRET
  - create your own unique random string
- NEO_4J_LEDGER_SPACE_BOLT_URL
- NEO_4J_LEDGER_SPACE_PASS
- NEO_4J_LEDGER_SPACE_USER
- NEO_4J_SEARCH_SPACE_BOLT_URL
- NEO_4J_SEARCH_SPACE_PASS
- NEO_4J_SEARCH_SPACE_USER
  - To set up Neo4j Aura databases:
    1. Go to https://neo4j.com/cloud/aura/ and sign up for two separate accounts using different email addresses.
    2. For each account, create a new database instance. One should be name ledgerSpace and the other searchSpace.
    3. Once the databases are created, you'll be provided with connection details.
    4. Use the Bolt URL, username, and password for each database to fill in the corresponding environment variables.
    5. The LEDGER_SPACE variables correspond to one database, and the SEARCH_SPACE variables to the other.

- OPEN_EXCHANGE_RATES_API
  - To get this secret from Open Exchange Rates:
    1. Go to https://openexchangerates.org/ and sign up for an account.
    2. Once logged in, navigate to your account dashboard.
    3. Look for your App ID or API Key.
    4. Copy this key and use it as the value for OPEN_EXCHANGE_RATES_API.

- WHATSAPP_BOT_API_KEY
  - create your own unique random string

Refer to the `.env.example` file in the root directory for a template of these environment variables. Remember to never commit your actual `.env` file with real values to version control.

## Setup

### For Codespaces

1. Set up GitHub Secrets:
   - Go to your personal GitHub Settings->Codespaces and Add New Secret for each, giving it access to the credex-dev repository.

2. Create a new Codespace:
   - Go to the main page of the credex-dev repository
   - Click on the "Code" button
   - Select the "Codespaces" tab
   - Click "Create codespace on main"

3. The Codespace will automatically set up the environment and submodules using the `init-environment.sh` script.

### For Local Development (this needs to be tested)

1. Clone this repository:
   ```
   git clone https://github.com/Credex/credex-dev.git
   cd credex-dev
   ```

2. Create a `.env` file in the root of the project based on .env.example

3. Build and start the development container:
   ```
   docker-compose up -d --build
   ```

4. Attach VS Code to the running container or use `docker exec` to access the container's shell.



# **Current Avatar Instructions from Developer**

I want to update the attached script to interact with the AI according to these response instructions sent to the AI

# AI response instructions !IMPORTANT!

## You have the option to respond to this query in one of two ways:
1. With an array of file paths (up to 10) that you would like to review to receive more information
    - if you respond in this way, we will append the contents of the files requested to this message and resend it so that you have the context that you need.
2. With the json described below and throught the rest of this message.
    - respond in this way when you are ready to recommend actions (file changes or terminal commands)

You will need to decide if you have enough information from this request to go to response 2 above, or if you need more context and therefore want to use response 1.

## Option 2: returning json to be parsed and acted on

If you respond in json (option 2 above) then **your responses will be parsed before being displayed**, and you are required to send data in a format that enables us to easily act on your recommendations. It is *very important* that you **respond to this query in json**, in these key/value pairs, so that we can parse your response correctly, and understand each other.

{
  "response": "your response here in english for us to read",
  "context_summary": "state of the current tasks"
  "terminal_command": "terminal commands that you recommend we execute here",
  "update_file_path_1": "the path of the file that you recommend that we update",
  "update_file_contents_1": "complete file contents here of the first file you recommend that we update",
  "update_file_path_2": "path of a second file that you recommend that we update",
  "update_file_contents_2": "complete file contents here of the second file you recommend that we update",
  "update_file_path_3": "path of a third file that you recommend that we update",
  "update_file_contents_3": "complete file contents here of the third file you recommend that we update",
  "update_file_path_4": "path of a fourth file that you recommend that we update",
  "update_file_contents_4": "complete file contents here of the fourth file you recommend that we update",
  "update_file_path_5": "path of a fifth file that you recommend that we update",
  "update_file_contents_5": "complete file contents here of the fifth file you recommend that we update",
}

DO not include anything in your response except the json above. Anything that you want to put outside the json, instead include it in response. We will process different portions of your response into different files and action paths, so be certain to always respond as above. 

### Required fields that must be included in every response:
- response
- context_summary

### Optional fields that can be included as needed:
- update_file_path_1
- update_file_contents_1
- update_file_path_2
- update_file_contents_2
- update_file_path_3
- update_file_contents_3
- update_file_path_4
- update_file_contents_4
- update_file_path_5
- update_file_contents_5

## Summary of context

## Attached file path 
/workspaces/greatsun-dev/avatar/avatarUp.py

### Attached file contents
import logging
import os
import json
from datetime import datetime
from anthropic import Anthropic
from typing import Optional, Dict, Any, List
import re
from utils import read_file_content, write_to_file, read_recent_logs, write_summary_of_context, get_directory_tree

# Constants
API_KEY = os.getenv("CLAUDE")
LOGS_DIRECTORY = "avatar/context/conversationLog"
SUMMARY_FILE = os.path.join("avatar", "context", "context_summary.json")
RESPONSE_INSTRUCTIONS = "avatar/context/responseInstructions.md"
AVATAR_README = "avatarREADME.md"
README = "README.md"
MESSAGE_TO_SEND = "avatar/messageToSend.md"
CONTEXT_DIR = "avatar/context"
TERMINAL_COMMANDS_FILE = "avatar/terminalCommands.txt"
CURRENT_RESPONSE_FILE = "avatar/currentResponse"

# Ensure directories exist
os.makedirs(LOGS_DIRECTORY, exist_ok=True)
os.makedirs(CONTEXT_DIR, exist_ok=True)
os.makedirs(os.path.dirname(TERMINAL_COMMANDS_FILE), exist_ok=True)
os.makedirs(os.path.dirname(CURRENT_RESPONSE_FILE), exist_ok=True)

def setup_logger() -> logging.Logger:
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    current_date = datetime.now().strftime("%Y-%m-%d")
    log_file = f"{LOGS_DIRECTORY}/{current_date}.log"
    
    file_handler = logging.FileHandler(log_file)
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.ERROR)
    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

logger = setup_logger()
client = Anthropic(api_key=API_KEY)

def extract_json_from_response(response: str) -> tuple[Optional[dict], str]:
    json_match = re.search(r'```json\n(.*?)\n```', response, re.DOTALL)
    if json_match:
        try:
            json_data = json.loads(json_match.group(1))
            remaining_text = response[:json_match.start()] + response[json_match.end():]
            return json_data, remaining_text.strip()
        except json.JSONDecodeError:
            logger.error("Failed to parse JSON from response")
    return None, response

def process_ai_response(response_json: Optional[Dict[str, Any]], remaining_text: str) -> None:
    if response_json:
        # Handle file update
        file_contents_update = response_json.get("update_file_contents")
        file_path_update = response_json.get("update_file_path")
        if file_contents_update and file_path_update:
            write_to_file(file_path_update, file_contents_update)
            logger.info(f"File updated: {file_path_update}")
        
        # Handle context summary update
        context_summary = response_json.get("context_summary")
        if context_summary:
            write_summary_of_context(context_summary)
            logger.info("Context summary updated")
        
        # Handle terminal command
        terminal_command = response_json.get("terminal_command")
        if terminal_command:
            write_to_file(TERMINAL_COMMANDS_FILE, terminal_command + "\n")
            logger.info(f"Terminal command written to '{TERMINAL_COMMANDS_FILE}': {terminal_command}")
        
        # Handle response
        response_text = response_json.get("response", "")
        if remaining_text:
            response_text += f"\n\nAdditional information:\n{remaining_text}"
        
        if response_text:
            write_to_file(CURRENT_RESPONSE_FILE, response_text)
            logger.info(f"Response written to '{CURRENT_RESPONSE_FILE}'")  
    else:
        logger.warning("No valid JSON found in the response.")
        write_to_file(CURRENT_RESPONSE_FILE, remaining_text)
        logger.info(f"Full response written to '{CURRENT_RESPONSE_FILE}'")

def get_message_content(file_path: str, included_file_content: Optional[str]) -> str:
    content_parts = [
        read_file_content(RESPONSE_INSTRUCTIONS),
        read_file_content(AVATAR_README),
        read_file_content(README),
        f"# **Current Avatar Instructions from Developer**",
        read_file_content(MESSAGE_TO_SEND),
        f"## Summary of context\n\n## Attached file path \n{file_path}" if file_path else None,
        f"### Attached file contents\n{included_file_content}" if included_file_content else None,
        f"### Last 15 minutes of logs\n{json.dumps(read_recent_logs(), indent=2)}",
        f"### Directory structure\n{json.dumps(get_directory_tree('/workspaces/greatsun-dev'))}",
        read_file_content(RESPONSE_INSTRUCTIONS)
    ]
    return "\n\n".join(filter(None, content_parts))

def main():
    while True:
        file_path = input("Optional file path (press Enter to skip, 'exit' to quit): ").strip()
        
        if file_path.lower() == "exit":
            print("Goodbye!")
            break
        
        included_file_content = read_file_content(file_path) if file_path else None
        message_content = get_message_content(file_path, included_file_content)
        
        write_to_file(os.path.join(CONTEXT_DIR, "messageSent.txt"), message_content)
        
        try:
            message = client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=4096,
                messages=[
                    {"role": "user", "content": message_content}
                ]
            )
            
            avatar_response = message.content[0].text
            
            print(f"Avatar: {avatar_response}")
            logger.info(f"File: {file_path}")
            logger.info(f"Avatar: {avatar_response}")
            
            write_to_file(os.path.join(CONTEXT_DIR, "fullResponseReceived.txt"), avatar_response)
            
            response_json, remaining_text = extract_json_from_response(avatar_response)
            process_ai_response(response_json, remaining_text)
            
        except Exception as e:
            logger.error(f"Error communicating with Anthropic API: {e}")

if __name__ == "__main__":
    main()


### Last 15 minutes of logs
""

### Directory structure
{".gitmodules": null, ".devcontainer": {"Dockerfile": null, "devcontainer.json": null}, ".env.example": null, "setup-submodules.sh": null, "summary_of_context.json": null, "main.py": null, "git_manager.sh": null, "start-services.sh": null, "__pycache__": {"readContext.cpython-310.pyc": null}, "avatarREADME.md": null, "credex-bot": {}, "tasks.md": null, "credex-core": {}, "README.md": null, "init-environment.sh": null, "READMEbackupTemp.md": null, "avatar": {"claudeNoContext.py": null, "messageToSend.md": null, "__pycache__": {"utils.cpython-310.pyc": null}, "utils.py": null, "currentResponse": null, "avatarUp.py": null, "context": {"fullResponseReceived.txt": null, "responseInstructions.md": null, "getDirectoryTree.py": null, "conversationLog": {"2024-09-14.log": null, "2024-09-15.log": null}, "responseReceived.txt": null, "messageSent.txt": null}}, "credex-dev.log": null, "devEnvNext.md": null, ".git": {"objects": {"e9": {"1021f1da5f9f2577a8b3b99896a3727a585e6d": null, "e1dc2c9ac45a53d46ebaf7b574415a651ae248": null, "44f1165c9cb1fd10c4b630d3f7593f87af5983": null}, "ae": {"7773f5e7f940a343372f8f1926fa299b120933": null, "0e20f65dddbf69c0a7d0a4283e38c19bae61e8": null, "c6d95ecf4c1be949a4131d45b552fe41a781b9": null}, "20": {"62016f11f914989e7c1e9c00f3239168f2c286": null, "764b049dc0055b95c03b4fa23335599efd35b8": null}, "43": {"cac3428d866f357b8148fa8afe5c83fc4791d6": null, "87c0ba9cabf18dc00e1915fede9b580b9fed2b": null}, "ad": {"2375115ea73e3535e7de4f7306bb35404f94b2": null}, "d8": {"084067c1d32395befbfa802a30f8f97d185004": null}, "1d": {"b2bfac6c7428d531ded961e0117be15f806f1b": null}, "60": {"f65711aefd4e7e816b0f0a9b7f891516ebe237": null, "ab812a3fc9d369a41af83739db5a524d4b248e": null}, "83": {"852d2a405a28463706e0d56a2792e9e79b7d1e": null, "28d027fa6100e54aa3bf567c51dae89e2f140e": null}, "be": {"d6649589298ab4fd383ebd876e03775c7f2a84": null, "f48d2d680cf14448e11cdcd9824e9eca62f5b3": null, "314fcdecde367480d9f5f7b9395b3581c20e40": null, "2d4950f1f8185fd2f78955e958717241b8d70b": null}, "73": {"6cd49c6ca96b194ef280972f0640f4af67d929": null}, "bd": {"153ae063cc91b96d950d76509e88d191ce1647": null, "fe0c2e2069fef969a13290b82762c7c82f2e4d": null, "fab6c796fb7396d7497947a6ef944f877e9c6e": null}, "6e": {"360635a02affc1c993de1498271db94916e408": null, "9174e169148f3f02ebfc5dd5d9ebc89e42e75d": null}, "c0": {"d40a50f1b493303a22fae7ac4eb62d843d9ada": null}, "a3": {"edfdb9cb4bc29a724ad8f6fa7d621109da5737": null}, "64": {"7826c318966ecfa5efc7c9f963ea7fe368905d": null, "471b692ea98ebc6b6ff0c9d825d6efef1ca1b0": null, "59b720729220753f6837255df8793fdcbdd9f6": null}, "ed": {"99f06bb1165db2ea165025dd3445feb15a490d": null, "26045afd7776b36d97353a4cf6ee459999d857": null, "f3be07c78bc22c424261facac4c4bbd33809a5": null}, "3a": {"6a0fe97d370066b10bf16056b250c7341a797d": null}, "b7": {"ed096216fb6540d3c00eb4cac86581ca6ce7bc": null}, "e1": {"16f359bb2e93881fcef07e494f9276b05936cc": null}, "16": {"ec5470b9209ba55c9793fc0ee362391ae649e6": null, "30c5df57346683ea806153af3678ba253709cf": null}, "46": {"e632e78477245b27c644845f628ef15cda41c9": null, "145ccfb461b3058ed834eee9abd2a059add093": null}, "51": {"21e887a8dc39de3a814fd1aa8918806a843219": null}, "0d": {"b45cb68998e59831ed2b570632598795365480": null, "6b1e16f244ed9fb6195b8c7cb51783d1a109e3": null}, "d0": {"76dede391d38c7c804aa5a5a4ee749406383da": null}, "06": {"febf69877ce55b335cb9411ac8c548dbc41404": null, "37a088a01e8ddab3bf3fa98dbe804cbde1a0dc": null}, "75": {"be295d8a5c330ef0315f8a046bd4862daa7927": null}, "91": {"4547678f131fb5be249c5b1bd64d9cce2a42e5": null}, "34": {"68d0c9fc6bc0440af8a71c9455a8b2cdaa397e": null, "49f76d5b6f4a00fc1eb3b179624d9ad647beda": null, "778689cd57ddfc060e2f590b912a63c150b257": null}, "09": {"9b8ffbb88dc94f3509fe61d462d709083d3965": null}, "97": {"10fcb6eaf567ab8d609859ddbca3a7b549b383": null, "20e939c1dae9588ed6f66861383a3e2526a1c7": null}, "9a": {"ca7c3b82c990aabe4498e74c5d66debc9682eb": null, "0d16a41ea852669c65f51af58eb3ce69707cb6": null}, "fc": {"9ffabc1d245d1cc444ac8609ac46f49564e5b7": null}, "17": {"1220ac5befca73f2dd29d6dc3b5910f518dc9e": null}, "f0": {"81bebfc94b6aa24fee2690144265c2a6003441": null}, "8e": {"17fa71c6e07627611643070352cb0a2b3cd239": null, "29e2cff769e4ca94e25bf15bb1713cb96154cd": null, "2faac86f7b89fca786272b56aa97ca086350d3": null, "a8f2dbd252c1d3b3a8ded85beb1b7c77ff9cf1": null, "f149603d3b46cd2a517af1ed5d59fc526d5265": null, "19e5ef50f01f7012fd1862e7c3795070009ba6": null}, "2b": {"2dffe057d1f260ddc017b8f28439fef790f63d": null}, "8b": {"2dc11c01b212d07ed746a98da4f1d6cdca7074": null}, "48": {"54750cc7d04fb7fa252f99196a218e20c71d90": null}, "b0": {"2ecb2689c0263191daf835e198ab136fb40bd3": null, "93d7954301fdf99cd8456b83666ebd81ed1774": null, "4ea6c2d7c79398fbf82233c2b4e3ba0a87ddf8": null}, "6f": {"7aa240cf8828b6a7fb0599bfe29b2366b130f7": null}, "88": {"0e6d26f68a7a28b8cb67142d127623efc9c90b": null}, "f4": {"d2f5f8a761e3a2affddfe3fad956b939b0ab95": null, "a2a28c1def79179c6ca007cb959117b8700485": null}, "f7": {"c88a4aa033fabd149f0d1c36c22ef94d0ae509": null}, "4e": {"9da248c62cf961c08ef105b8dc05ed60b7b065": null, "ffadd9f07ef8889005fdc489bb4bf5f062a1c7": null}, "a9": {"944ef8d53e75258b6e83e5a3528c09bcb16a6a": null}, "2f": {"cda4229986beb832a18317a71d8e8a651bacd3": null}, "7a": {"5542e8e600d7f4c1eeae0843d522c8f96c82bf": null, "e5ed91affa9441af908394caed9977e505ceaa": null}, "4a": {"68207bcc01f263df8867eda861766658ec8c82": null}, "01": {"9113547ccd8c83795829f4ec9a191fdb2adbb1": null, "eadb64da75372943a07c920a79eba7c1a7e9fb": null}, "c2": {"89e03aaf687f26aecabbb2869e42bbd3ad2d0e": null}, "8d": {"b57d57b21d24e859cd8a03bdbd9a405e038a6f": null}, "f3": {"654594837962c728778c4a9d033f060a10d8ce": null}, "24": {"b560ce124ef85ddafb043bbeac059751af4fff": null}, "pack": {"pack-1bd8c60010c90b064436e1f6997de31c723147c1.pack": null, "pack-1bd8c60010c90b064436e1f6997de31c723147c1.idx": null, "pack-1bd8c60010c90b064436e1f6997de31c723147c1.rev": null}, "76": {"39b826487f68681ba2dd7e60d73792632d71da": null, "089d32456f2f6fc97d01b58866cd1ed6c0e519": null, "15e8c4c3a99682964571280d43a57272fc5f97": null, "03254063d698f7f5a4023df31768582e39ecb3": null}, "0f": {"248772a61898e00d7cb799d192d1c39e6a0022": null, "831830d5b14955a4fc6819ae915fa253553978": null, "ef99df962ea28a1e5a16a9eecd102adf1ffd62": null}, "fb": {"e257f4929463915e9ce87b4b6f82f01f904cbc": null, "8cae7d1a947b9efa8851f3a541f4e40751ead0": null, "309eab036e3fd85fa13864945ba935e5c23f1e": null}, "67": {"a5ab8a5a4b0acfcc78d9149cc0ec94aa682e17": null, "fdacd244ba6f2fa5bb8432d4c8b2f376af76ad": null, "d2064af1a6c64a5e47bd4b4a58a6b5ce046d93": null}, "d4": {"185e42fe9255005fe1ce36c61ceef28e9cf932": null, "ff13dae84a33b1eb1e57e4b670c832c58ce39b": null}, "dd": {"b3e44919b33c69832857c4348210126cd336e6": null}, "53": {"a5e23457b3e035de43cc8fda4075ebda340a55": null}, "3d": {"637dcf4bdfb995571c26f3a93c2386738b1274": null}, "8a": {"534047a0274a2dfd0ef1707cfba64d223e53fa": null, "e5424f27ca46e4fb4dae8d9bee3455583a88c4": null, "3ec3b518ab4e01623eff96175ea104cf5dae9d": null}, "ec": {"385031b7a92cd87e39f8ac536240394700ae02": null}, "7d": {"12e70c79fd26e3356112bf2168dc8ff2274b2d": null, "9abdb0c11f55b1a89fd5237fc99319b218b7e6": null}, "96": {"5f36334c26822383782ae8a810fbe3d715112e": null}, "9b": {"1208b42fcc8b197b17b5e3b490d60a39a810eb": null}, "6c": {"abbe6e8ba5741bf7e5a2bcfa5587ec358b6460": null, "83f664da3701a2a9fc897d9e588781d373a13d": null}, "30": {"e0b9c782adcee4892a0a7ba74d8ccce9c249be": null, "24925287309b6ccd1ae55f6325ee1626adae15": null, "9994f3067f231bdf62497e09200982f3437216": null}, "93": {"897a88004618db1d5a7e15c2eb13ef8216e744": null}, "3c": {"d6f3cf0865441a6fa1c70a0be65d42a38931ee": null, "69472600034c1ce34aabef390c5429b6e7639b": null}, "49": {"5721e369d6d15d59fbe71a2b725119b0499dcf": null}, "95": {"678bce294dd436e8e0c126a040e64605c6fbf5": null, "496b74057d17e34b0fe868fa94d63a338b2de2": null, "662a42eeef2ed6f0502142f474187b87640576": null}, "41": {"305bbea30d9ecf0e769bdda86085d0133223bf": null}, "39": {"2d01c204fd83a31cec29d16329d7a0025ad615": null, "9f95d8b762fbc1dac3a7c95799981f9d7ef00f": null}, "32": {"1b8a6a1947ba9c657fb8daf4578938617892ec": null}, "57": {"93d916a0c6710c50ac436ae299014efb24b33d": null, "748ac50acce3d6457cdc1fae7387d99bf504ef": null}, "info": {}, "81": {"be7fd5cd76dc8d561ee3974064e306c8eebe65": null, "a921dc00411db93650a8c2213ee8cdf6b172fc": null}, "a7": {"267b6ca97e2663e0f7ce28f1d6237a6114904c": null, "de94d6fb653ed038dbed67457f9f39281f851d": null}, "63": {"2e746403946bc9da9fcdad3661270be8976549": null, "e210c6d9b440b3e35762f1dbec36a28eb757f7": null}, "a5": {"802d426dc11737b250962d5c7f50a6fd24e0c2": null}, "ea": {"1dad7f8bbead18b4c78236b4c3e84886fd896b": null, "3225925e37cbfd97bdc62e136935538fca06c7": null}, "92": {"fb190a96606db7d17980addad2c8a471ef2242": null}, "13": {"975c339baa9bf025416f062927017e3175a60b": null, "bbdce6029b70f5dba937f0b4f587e6902cad1c": null}, "42": {"b8100c6016c5f4d54c8d5198f8daf6b02c160a": null}, "cf": {"1e4d33954f20f2360caf6fc18a81ebf9825686": null}, "ba": {"f0ff6854402701af1767647f639dcbf516e4c9": null}, "9d": {"3629bc146631c869aaaf1f565b87c6d96c5a8d": null, "91cd6ce27d665969e6d08eb86ce116677db1af": null}, "5f": {"1c8b938de243dcd48d841ed66dee11382fa497": null}, "c5": {"ac8b4933fd0908ea4beded02975294d475a183": null}, "18": {"9bca3f885e7f6f52777643951440b77d41d56a": null}, "90": {"91dd66159c70836d87a2cc27cfc322df9d7dd6": null, "94323e88d20ee6f96f1575a909d7cea3ce7160": null, "a1362630d68f8ac56eff38d69aaf33dc038e61": null, "8e499bd1337f79fccb77689eca7feb60e3ac18": null}, "56": {"70e0ba8e3ac0c5ca138b8938c7bdf7765e1f67": null, "86073cb63c0e4d67790470c6fa31792d8cc228": null, "fc619419c4680c5cb1e6477536d808d012f0f8": null}, "e2": {"b53e204b668c010daae721ad4e972e2a32bee3": null}, "77": {"c03a709f2174f48b09f35baad2421220926b3c": null}, "05": {"8e16656605e01c03d201196bd48eec0379e1fc": null, "92901cf9acd206de081b8dc440aed02b33a3da": null, "86d93a262703a5d3d2c891b57e4d4841893175": null}, "1a": {"889da4884c68fa2f1c31e30d50a90620b4fd41": null, "6b4fc477f52b60939251371897c7e14cff910e": null}, "9c": {"7d43b873b96350a49d5f3a103ef1554e9c4b11": null, "2f62a718b6e15c568ff25f4fbc836bc92795bd": null}, "65": {"fb3070f3adc9d6d07965737b49ff67423c866f": null, "8c752d6daa9b761a5a7f369d5e5f62ea541100": null, "9c1d723770e71fdf938eb40982db58d4c65b64": null}, "d5": {"6c68a2201b6df5a0e427bc4bb23cdb2e468c1d": null}, "5e": {"4174f8e33fefc534aefe3a51ca0ce9eaf6e9a3": null}, "f8": {"6c5b8dfe354c8f29ab6358c765486f25528350": null}, "15": {"4a5f46bd6a2d587f8d6b1d862205acbbdd496f": null}, "bc": {"769feb7059b0350eb00ea2c0e65587dbc0cb50": null}, "d1": {"7bafa1fce147a1d36e9ca2d0d6b951027e7ad8": null}, "6d": {"f31965f7273c280544fa0fd797228683241093": null}, "11": {"39c037d5b6daa428ed147cc4bfd31a831735ab": null, "42c400ac0551462776204f43281b341733fde1": null}, "35": {"c2709fcc0b429c737a2a132e4410ce6e7b83e0": null}, "8c": {"1ba601808249dd18a9ce93384f849e316f4a47": null, "85353456ae92c4858572e935a5a25d715346b0": null}, "37": {"728b119e4d01d742d31d9a447e3057dd783aef": null, "4cc10367bbc0c4545a7eada89a517e08e42f21": null}, "cb": {"51a42378481743ef4be4bff965486547df69fa": null}, "74": {"d4e17191c573d4db9abf03841a7e74ab8f9003": null, "fc50acdac4e6b9403a6b749041a4556f86e235": null}, "04": {"2ad1ac3611f67195a897812e84803a6aa069d9": null}, "d2": {"e1a4c2807975af875b1a1e496c0f539bcb5fe4": null, "a5d9967cc52dd91f0cf359bd13f791ecd0d171": null}, "94": {"492635832522cf29065b8d11769624f987a31a": null}, "70": {"2af94d10530edcc3a7094a202f950dffded39d": null}, "66": {"77bf2b871b982f7f9b162f66d0d394d355b2d9": null}, "99": {"16732a76be2982aecab4e2a75f1faefad1efb5": null, "c1e851a95175b790db423fef90aa4290ba7a18": null}, "79": {"1edb6d47f0c3084cf7c7f106ae6fe3ddfb0843": null, "c59ca93b38353ad287e34b579a6f4cc80c8dfd": null}, "44": {"a527eb55cb32cd93d05407dadc93deafa3377a": null}, "ff": {"95f049a348a93160fb40cde989f04884b6c672": null}, "d7": {"824a88c30e013aa853146657f904175f2cbd9e": null}, "b3": {"977aa19889e3d90ec6a5323911510916c23a32": null, "966106652dc13292c4c391cdce8b233792ffbe": null}, "fd": {"beb43cfb0714730c306f4c8e32dbf5b0d8eda0": null}, "1c": {"5ebf7a6e0d5fd3e3a926feaf69a5149e5df311": null}, "a0": {"895edb9f04668a1efa7a2746e4b6dd1e861e03": null}, "02": {"32ca4eafcba6a44c3a797c8a8dc5234a69d51f": null, "af00d101fe670d93792e0b122990be6d8a09c2": null, "69d68f11ac1a4240d35c013502e787415bb665": null}, "cc": {"89c76225fe14617aaaf4577dd6679df80cb0b7": null, "48ac6277861e33fe133cec80eb62188ed6a60e": null}, "2e": {"61645dcf549f1f306632c890fedf381fe42e2f": null}, "c3": {"d2400e64a57e0875cfe187e9876ead753906e4": null}, "0b": {"1acd316847b330830879e0e2e7407d71858d9a": null}, "69": {"07664b9fb7ac1a08d518c7541e1a04e89e6527": null}, "4c": {"762b0fe9851a148b91d904763bf59e8f268e0c": null, "d7ede8cd62d3d4087f864f65ef132f9364c716": null}, "14": {"7b73439e5fdf3cca4e6d180d805d2070e80ccb": null}, "bf": {"5705a844f9401599a20965e0a06b0f2a9e7482": null}, "36": {"9a3e3f85cc64cda74c220bf1826386907f3ca7": null, "9d848627e74db34b8bcc4283ffd989bde2d28d": null}, "22": {"d73937c87976e849500127814304a773b4831f": null, "64423c8595458e5ed7202d5ff3aaf0fae71164": null, "1beb5941f03d0fe94bee8ddaea57e1b68b6438": null}, "ca": {"04c1af83b4425a366b26b2e11305da329b8b1d": null}, "23": {"c04cde41e99597ae50c2e7f9b022e7497c50ec": null}, "6a": {"1b1a28edf29f8072f76e1e6c78b6f1690bd515": null}, "5b": {"e8df90c54aa42e705f102dacb739657ef8079f": null}, "e3": {"386aa31c442e75e4aac49036178e4fe0a2d2f0": null, "1fdba32558f78f4bec7b94b9c7ae44b8f882dd": null, "3a2f1e9c9a07f110e1c5c304a31d9e701492ca": null, "061bc72cf9f4dcf7ede72222d65763cc341fb4": null}, "61": {"377cd864699a1e15751100055f3325af8ca6a0": null, "b6e086cec000dccef7e27b7ac9b62f2ad358f5": null}, "71": {"687052649eaf4e34b3f001860119854a0c05fe": null, "9bf3a41a34baff1a0d2f054fc47bcc251e2a72": null}, "4d": {"b50ea497e4864661f5c45b2780b67b85e13ea8": null}, "12": {"c1f0cfca21f8684fee51d0722258cd0c7932e0": null, "5858b9e89b097f23654bd6252880c1c13b844d": null, "e3570830411ba19acca4d807619bb0c8ccdec1": null, "db2a471f5ac13fc0de6a99af91a1a8dca0b2e7": null}, "3b": {"d5de258f22830435496c178b9ba1d608af71b9": null, "d310ef7c0652e81dfd850eb04147001e00712f": null}, "c7": {"a98264aac9750761b7b07945adc38dbd1e0376": null}, "cd": {"dbd11ae64ba099a08c31a3f39eaa58c317360c": null}, "82": {"24123c9ec007967b0e54ac2964e60b307ee98e": null, "4745198e8d9812552467d88088c802f82270e3": null}, "f6": {"384375b8b68b6f231980fe812ed437a12c95ae": null}, "e4": {"d334411ce8153c1d33c2e62a5c63df6d66e2fa": null, "9881cb9493233a8923afa23bbc2ac6ea97d893": null}, "9e": {"473ca0f1bdf9f1d089e8fac44b7a6520c49526": null, "8be539dfb6fd9f43c110aca3c784804ceef76d": null}, "2c": {"b4aeadc8c7d09109268fa643ebd6674dfe2c99": null, "4a83a4bacf8ed4bc360f063e5b7907f947c885": null}, "1e": {"1e10133a30ba1b2ff14157456c9624ff4afff1": null}, "50": {"6849b3d0c2e75c9f4323db14aca146479dbefd": null, "b54741f6d5912b07d4c85a82a2ff430e5ee06f": null, "a2de4083155fbda11873751a1e5a4436168a95": null, "afdf70c1737b3d34c862a2cb51b88f464f1ce4": null}, "78": {"2f87aaa974c5d43740a29cb8b294e498500f05": null, "3610ad7aef8b31a52f78bca9ba529e4a2e5114": null, "5174565e5f8d7d23594aeb96155d8719a1ecf8": null}, "eb": {"5d80f4e51cf1b40d6135174d105bc7426f6dff": null}, "62": {"c041fa221416ce806caaba5b56b1db1f173ef3": null, "3a4103c553b89db1379c728ef7dc3746fbf4bb": null}, "52": {"2499c91134e38ab365b9020e5116898e89a2ed": null, "268df1cfd1aa6e42836496fc85d6cb6e1bc1c8": null, "c5d1b14370cc7991b3548a221ec070d56dddec": null}, "27": {"f8d70d9650334089d366e654f079b6202d4a65": null}, "84": {"d8bfa90cfb03d02979e53a90a08512033d9fa0": null}, "c4": {"d05416d71edf50a1656e5f84bce6955462db70": null}, "89": {"8ed36b9627702f75d4fc01c0ab7959160f2080": null}, "a6": {"c61b7188d6404f10ec2d2415a65c0b94e7b106": null}, "e6": {"9de29bb2d1d6434b8b29ae775ad8c2e48c5391": null, "eb436a1f4a12f6a10f43f353eea69525e8e336": null}, "8f": {"7f590e15b0d8a0145f87f378e631ca4f2df4b1": null}, "a8": {"418f28e61e8c704b94abc285d9f1bf8f168cd7": null}, "10": {"1c4d65123f3faaac81f00a3a163aa4fa113304": null, "e345e28c733e5765def2a1292886ce1a9e7159": null, "63536adc36db9e7558919a126cf51a49c5b052": null}, "c1": {"f55c6c683ac5a5703b626b35e73bf97930c9f2": null}, "58": {"53305149f81205004d489eeacf984234a02a56": null, "a20670ec3fd89df67c8325cdd5219827e09590": null}, "45": {"15fa116cff0a9e033b6ad25f2bfa4b89bc3baf": null}, "fa": {"7ec50354cf100b1104d24e77e12f5ebc95630d": null, "96978025f9ed2bc3c95f39aa2e7de56782db8b": null, "c8ff555521286d0f267ec84c90dd977f287157": null}, "b6": {"3c2e6b11a9dfb44e06c521b06aa51e979cc21c": null, "bd64736f3f65b9342efe3fdb552c594c8fe241": null, "20ca4eafcabf4667ff4f8f0d94e4e15d49b795": null}, "7b": {"0321f3d16835a8f337246224eced25785e2de9": null}, "d9": {"e48cf321a60078e58a3f8656f90e652e2d4ca1": null}}, "FETCH_HEAD": null, "refs": {"remotes": {"origin": {"feature-20240914-163748": null, "feature-20240914-185756": null, "HEAD": null}}, "tags": {}, "heads": {"feature-20240914-154314": null, "feature-20240914-163748": null, "feature-20240914-185756": null, "feature-20240914-120616": null, "main": null}}, "info": {"exclude": null}, "packed-refs": null, "config": null, "HEAD": null, "hooks": {"pre-receive.sample": null, "push-to-checkout.sample": null, "pre-commit.sample": null, "pre-applypatch.sample": null, "prepare-commit-msg.sample": null, "applypatch-msg.sample": null, "fsmonitor-watchman.sample": null, "post-update.sample": null, "pre-rebase.sample": null, "pre-merge-commit.sample": null, "pre-push.sample": null, "commit-msg.sample": null, "sendemail-validate.sample": null, "update.sample": null}, "branches": {}, "index": null, "ORIG_HEAD": null, "logs": {"refs": {"remotes": {"origin": {"feature-20240914-163748": null, "feature-20240914-185756": null, "HEAD": null}}, "heads": {"feature-20240914-154314": null, "feature-20240914-163748": null, "feature-20240914-185756": null, "feature-20240914-120616": null, "main": null}}, "HEAD": null}, "description": null, "COMMIT_EDITMSG": null}, "credex-core.log": null, "credex-bot.log": null, "requirements.txt": null}

# AI response instructions !IMPORTANT!

## You have the option to respond to this query in one of two ways:
1. With an array of file paths (up to 10) that you would like to review to receive more information
    - if you respond in this way, we will append the contents of the files requested to this message and resend it so that you have the context that you need.
2. With the json described below and throught the rest of this message.
    - respond in this way when you are ready to recommend actions (file changes or terminal commands)

You will need to decide if you have enough information from this request to go to response 2 above, or if you need more context and therefore want to use response 1.

## Option 2: returning json to be parsed and acted on

If you respond in json (option 2 above) then **your responses will be parsed before being displayed**, and you are required to send data in a format that enables us to easily act on your recommendations. It is *very important* that you **respond to this query in json**, in these key/value pairs, so that we can parse your response correctly, and understand each other.

{
  "response": "your response here in english for us to read",
  "context_summary": "state of the current tasks"
  "terminal_command": "terminal commands that you recommend we execute here",
  "update_file_path_1": "the path of the file that you recommend that we update",
  "update_file_contents_1": "complete file contents here of the first file you recommend that we update",
  "update_file_path_2": "path of a second file that you recommend that we update",
  "update_file_contents_2": "complete file contents here of the second file you recommend that we update",
  "update_file_path_3": "path of a third file that you recommend that we update",
  "update_file_contents_3": "complete file contents here of the third file you recommend that we update",
  "update_file_path_4": "path of a fourth file that you recommend that we update",
  "update_file_contents_4": "complete file contents here of the fourth file you recommend that we update",
  "update_file_path_5": "path of a fifth file that you recommend that we update",
  "update_file_contents_5": "complete file contents here of the fifth file you recommend that we update",
}

DO not include anything in your response except the json above. Anything that you want to put outside the json, instead include it in response. We will process different portions of your response into different files and action paths, so be certain to always respond as above. 

### Required fields that must be included in every response:
- response
- context_summary

### Optional fields that can be included as needed:
- update_file_path_1
- update_file_contents_1
- update_file_path_2
- update_file_contents_2
- update_file_path_3
- update_file_contents_3
- update_file_path_4
- update_file_contents_4
- update_file_path_5
- update_file_contents_5