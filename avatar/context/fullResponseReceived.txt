{
  "response": "After reviewing the `utils.py` file, I can recommend the necessary changes to remove the `context_summary` field from the response format and update the scripts accordingly. Here are the updates:",
  "update_file_path_1": "avatar/utils.py",
  "update_file_contents_1": "import os\nimport logging\nfrom datetime import datetime\nimport json\nimport re\n\ndef setup_logger(logs_directory: str) -> logging.Logger:\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    current_date = datetime.now().strftime(\"%Y-%m-%d\")\n    log_file = f\"{logs_directory}/{current_date}.log\"\n    \n    file_handler = logging.FileHandler(log_file)\n    file_handler.setLevel(logging.INFO)\n    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))\n    \n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(logging.ERROR)\n    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))\n    \n    logger.addHandler(file_handler)\n    logger.addHandler(console_handler)\n    \n    return logger\n\ndef read_file_content(file_path: str) -> str:\n    try:\n        with open(file_path, 'r') as file:\n            content = file.read()\n        return content\n    except FileNotFoundError:\n        return ''\n\ndef write_to_file(file_path: str, content: str) -> None:\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    with open(file_path, 'w') as file:\n        file.write(content)\n\ndef read_recent_logs(logs_directory: str, max_logs: int = 15) -> list[dict]:\n    log_files = sorted([f for f in os.listdir(logs_directory) if f.endswith('.log')], reverse=True)\n    recent_logs = []\n    for log_file in log_files[:max_logs]:\n        log_path = os.path.join(logs_directory, log_file)\n        with open(log_path, 'r') as file:\n            log_content = file.read()\n        recent_logs.append({'file': log_file, 'content': log_content})\n    return recent_logs\n\ndef extract_json_from_response(response: str) -> tuple[dict | None, str]:\n    json_match = re.search(r'\\{[\\s\\S]*?\\}', response)\n    if json_match:\n        try:\n            json_data = json.loads(json_match.group())\n            remaining_text = response[:json_match.start()] + response[json_match.end():]\n            return json_data, remaining_text.strip()\n        except json.JSONDecodeError:\n            print(\"Failed to parse JSON from response\")\n    return None, response\n\ndef get_directory_tree(directory: str) -> dict:\n    tree = {}\n    for root, dirs, files in os.walk(directory):\n        rel_path = os.path.relpath(root, directory)\n        if rel_path == '.':\n            rel_path = ''\n        node = tree\n        parts = rel_path.split(os.path.sep)\n        for part in parts:\n            node = node.setdefault(part, {})\n        for file in files:\n            node[file] = None\n    return tree",
  "update_file_path_2": "avatar/avatarUp.py",
  "update_file_contents_2": "import os\nfrom anthropic import Anthropic\nfrom utils import setup_logger, read_file_content, write_to_file, read_recent_logs, extract_json_from_response, get_directory_tree\n\n# Constants\nAPI_KEY = os.getenv(\"CLAUDE\")\nif not API_KEY:\n    raise ValueError(\"CLAUDE API key not found in environment variables\")\n\nLOGS_DIRECTORY = \"avatar/context/conversationLogs\"\nRESPONSE_INSTRUCTIONS = \"avatar/context/responseInstructions.md\"\nAVATAR_README = \"avatarREADME.md\"\nREADME = \"README.md\"\nMESSAGE_TO_SEND = \"avatar/messageToSend.md\"\nCONTEXT_DIR = \"avatar/context\"\nTERMINAL_COMMANDS_FILE = \"avatar/terminalCommands.txt\"\nCURRENT_RESPONSE_FILE = \"avatar/currentResponse.txt\"\n\n# Ensure directories exist\nos.makedirs(LOGS_DIRECTORY, exist_ok=True)\nos.makedirs(CONTEXT_DIR, exist_ok=True)\nos.makedirs(os.path.dirname(TERMINAL_COMMANDS_FILE), exist_ok=True)\nos.makedirs(os.path.dirname(CURRENT_RESPONSE_FILE), exist_ok=True)\n\nlogger = setup_logger(LOGS_DIRECTORY)\n\ntry:\n    client = Anthropic(api_key=API_KEY)\nexcept Exception as e:\n    logger.error(f\"Error initializing Anthropic client: {e}\")\n    raise\n\ndef process_ai_response(response_json: dict | None, remaining_text: str) -> None:\n    if response_json:\n        for key, value in response_json.items():\n            if value:\n                logger.info(f\"Processing {key}\")\n                if key.startswith(\"update_file_path\"):\n                    index = key.split(\"_\")[-1]\n                    content_key = f\"update_file_contents_{index}\"\n                    if content_key in response_json:\n                        write_to_file(value, response_json[content_key])\n                        logger.info(f\"Updated file: {value}\")\n                    else:\n                        logger.warning(f\"Missing content for file: {value}\")\n                elif key == \"terminal_command\":\n                    with open(TERMINAL_COMMANDS_FILE, \"a\") as f:\n                        f.write(value + \"\\n\")\n                    logger.info(f\"Added terminal command: {value}\")\n                elif key == \"response\":\n                    write_to_file(CURRENT_RESPONSE_FILE, value)\n                    logger.info(f\"Wrote response to {CURRENT_RESPONSE_FILE}\")\n    else:\n        logger.warning(\"No valid JSON found in the response.\")\n    \n    if remaining_text:\n        write_to_file(os.path.join(CONTEXT_DIR, \"remaining_text.txt\"), remaining_text)\n        logger.info(\"Wrote remaining text to file\")\n\ndef get_message_content(file_path: str, included_file_content: str | None) -> str:\n    content_parts = [\n        read_file_content(RESPONSE_INSTRUCTIONS),\n        read_file_content(AVATAR_README),\n        read_file_content(README),\n        f\"# **Current Avatar Instructions from Developer**\",\n        read_file_content(MESSAGE_TO_SEND),\n        f\"## Summary of context\\n\\n## Attached file path \\n{file_path}\" if file_path else None,\n        f\"### Attached file contents\\n{included_file_content}\" if included_file_content else None,\n        f\"### Last 15 minutes of logs\\n{json.dumps(read_recent_logs(LOGS_DIRECTORY), indent=2)}\",\n        f\"### Directory structure\\n{json.dumps(get_directory_tree('/workspaces/greatsun-dev'))}\",\n        read_file_content(RESPONSE_INSTRUCTIONS)\n    ]\n    return \"\\n\\n\".join(filter(None, content_parts))\n\ndef main():\n    while True:\n        file_path = input(\"Optional file path (press Enter to skip, 'exit' to quit): \").strip()\n        \n        if file_path.lower() == \"exit\":\n            print(\"Goodbye!\")\n            break\n        \n        included_file_content = read_file_content(file_path) if file_path else None\n        message_content = get_message_content(file_path, included_file_content)\n        \n        write_to_file(os.path.join(CONTEXT_DIR, \"messageSent.txt\"), message_content)\n        \n        try:\n            message = client.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                max_tokens=4096,\n                messages=[\n                    {\"role\": \"user\", \"content\": message_content}\n                ]\n            )\n            \n            avatar_response = message.content[0].text\n            \n            print(f\"Avatar: {avatar_response}\")\n            logger.info(f\"File: {file_path}\")\n            logger.info(f\"Avatar: {avatar_response}\")\n            \n            write_to_file(os.path.join(CONTEXT_DIR, \"fullResponseReceived.txt\"), avatar_response)\n            \n            response_json, remaining_text = extract_json_from_response(avatar_response)\n            process_ai_response(response_json, remaining_text)\n\n        except Exception as e:\n            logger.error(f\"Error communicating with Anthropic API: {e}\")\n\nif __name__ == \"__main__\":\n    main()"
}