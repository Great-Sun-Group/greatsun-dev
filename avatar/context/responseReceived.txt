{
  "response": "The requested changes have been successfully completed as follows:\n- The 'currentContext' directory has been renamed to 'context'\n- The 'conversationLog' directory has been moved into the 'avatar' directory\n- The 'avatarUp.py' script has been updated to use the new paths and file locations",
  "update_file_path": "/workspaces/greatsun-dev/avatar/avatarUp.py",
  "update_file_contents": "import logging\nimport os\nimport json\nfrom datetime import datetime\nfrom anthropic import Anthropic\nfrom typing import Optional, Dict, Any, List\n\nAPI_KEY = os.getenv(\"CLAUDE\")\nLOGS_DIRECTORY = \"avatar/conversationLog\"\nSUMMARY_FILE = \"avatar/context/context_summary.json\"\nAVATAR_README = \"avatarREADME.md\"\nREADME = \"README.md\"\nMESSAGE_TO_SEND = \"avatar/messageToSend.txt\"\nCONTEXT_DIR = \"avatar/context\"\n\nos.makedirs(LOGS_DIRECTORY, exist_ok=True)\nos.makedirs(CONTEXT_DIR, exist_ok=True)\n\ndef setup_logger() -> logging.Logger:\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    current_date = datetime.now().strftime(\"%Y-%m-%d\")\n    log_file = f\"{LOGS_DIRECTORY}/{current_date}.log\"\n    \n    file_handler = logging.FileHandler(log_file)\n    file_handler.setLevel(logging.INFO)\n    file_formatter = logging.Formatter('%(asctime)s - %(message)s')\n    file_handler.setFormatter(file_formatter)\n    \n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(logging.ERROR)\n    console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    console_handler.setFormatter(console_formatter)\n    \n    logger.addHandler(file_handler)\n    logger.addHandler(console_handler)\n    \n    return logger\n\nlogger = setup_logger()\nclient = Anthropic(api_key=API_KEY)\n\ndef read_file_content(file_path: str) -> Optional[str]:\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        logger.error(f\"File not found: {file_path}\")\n    except Exception as e:\n        logger.error(f\"Error reading file: {e}\")\n    return None\n\ndef write_to_file(file_path: str, content: str) -> None:\n    try:\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n        with open(file_path, 'w') as file:\n            file.write(content)\n        logger.info(f\"Content written to {file_path}\")\n    except Exception as e:\n        logger.error(f\"Error writing to file: {file_path}, {e}\")\n\ndef read_summary_of_context() -> List[Dict[str, str]]:\n    try:\n        with open(SUMMARY_FILE, 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        logger.info(\"Summary of context file not found, returning empty list\")\n        return []\n    except Exception as e:\n        logger.error(f\"Error reading summary of context: {e}\")\n        return []\n\ndef write_summary_of_context(summary: List[Dict[str, str]]) -> None:\n    try:\n        with open(SUMMARY_FILE, 'w') as file:\n            json.dump(summary, file, indent=2)\n        logger.info(\"Summary of context updated\")\n    except Exception as e:\n        logger.error(f\"Error writing summary of context: {e}\")\n\ndef get_directory_tree(root_dir: str) -> Dict[str, Any]:\n    directory = {}\n    try:\n        for item in os.listdir(root_dir):\n            path = os.path.join(root_dir, item)\n            if os.path.isdir(path):\n                directory[item] = get_directory_tree(path)\n            else:\n                directory[item] = None\n    except Exception as e:\n        logger.error(f\"Error getting directory tree: {e}\")\n    return directory\n\ndef main():\n    while True:\n        file_path = input(\"Optional file path (press Enter to skip, 'exit' to quit): \").strip()\n        \n        if file_path.lower() == \"exit\":\n            print(\"Goodbye!\")\n            break\n        \n        avatar_readme_content = read_file_content(AVATAR_README)\n        readme_content = read_file_content(README)\n        message_to_send_content = read_file_content(MESSAGE_TO_SEND)\n        included_file_content = read_file_content(file_path) if file_path else None\n        \n        summary_of_context = read_summary_of_context()\n\n        directory_tree_json = json.dumps(get_directory_tree(\"/workspaces/greatsun-dev\"))\n        \n        message_content = \"\\n\\n\".join(filter(None, [\n            avatar_readme_content,\n            readme_content,\n            message_to_send_content,\n            f\"### Summary of context (required)\\n{json.dumps(summary_of_context, indent=2)}\",\n            f\"# Directory structure\\n{directory_tree_json}\",\n            f\"# Attached file path \\n{file_path}\" if file_path else None,\n            f\"# Attached file contents\\n{included_file_content}\" if included_file_content else None\n        ]))\n        \n        write_to_file(os.path.join(CONTEXT_DIR, \"messageSent.txt\"), message_content)\n        \n        try:\n            message = client.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                max_tokens=4096,\n                messages=[\n                    {\"role\": \"user\", \"content\": message_content}\n                ]\n            )\n            \n            avatar_response = message.content[0].text\n            \n            print(f\"Avatar: {avatar_response}\")\n            logger.info(f\"File: {file_path}\")\n            logger.info(f\"Avatar: {avatar_response}\")\n            \n            write_to_file(os.path.join(CONTEXT_DIR, \"responseReceived.txt\"), avatar_response)\n            \n            try:\n                response_json = json.loads(avatar_response)\n                \n                # Handle file update\n                file_contents_update = response_json.get(\"update_file_contents\")\n                file_path_update = response_json.get(\"update_file_path\")\n                if file_contents_update and file_path_update:\n                    write_to_file(file_path_update, file_contents_update)\n                    logger.info(f\"File updated: {file_path_update}\")\n                \n                # Handle context summary update\n                context_summary = response_json.get(\"context_summary\")\n                if context_summary:\n                    context_summary_path = os.path.join(CONTEXT_DIR, \"context_summary.json\")\n                    write_to_file(context_summary_path, json.dumps(context_summary, indent=2))\n                    logger.info(\"Context summary updated\")\n                \n                # Handle terminal command\n                terminal_command = response_json.get(\"terminal_command\")\n                if terminal_command:\n                    print(f\"Suggested terminal command: {terminal_command}\")\n                    logger.info(f\"Suggested terminal command: {terminal_command}\")\n                \n                # Print response\n                print(response_json.get(\"response\", \"No response provided\"))\n                \n            except json.JSONDecodeError:\n                logger.error(\"Error parsing JSON response\")\n                print(\"Error: The AI's response was not in the expected JSON format.\")\n                \n        except Exception as e:\n            logger.error(f\"Error communicating with Anthropic API: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n",
  "terminal_command": "",
  "context_summary": [
    {
      "summary": "The requested changes to rename the 'currentContext' directory to 'context', move the 'conversationLog' directory into the 'avatar' directory, and update the 'avatarUp.py' script have been successfully completed."
    }
  ]
}