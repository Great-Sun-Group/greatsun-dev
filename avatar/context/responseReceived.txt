```json
{
  "response": "I can help you split the script into multiple files with functions. First, let's create a new file called `utils.py` to hold the utility functions. Here's the contents for `utils.py`:",
  "update_file_path": "/workspaces/greatsun-dev/avatar/utils.py",
  "update_file_contents": "import os\nimport json\nimport logging\nfrom typing import Optional, Dict, Any, List\n\n# Constants\nLOGS_DIRECTORY = \"avatar/context/conversationLog\"\nSUMMARY_FILE = os.path.join(\"avatar\", \"context\", \"context_summary.json\")\nCONTEXT_DIR = \"avatar/context\"\n\n# Ensure directories exist\nos.makedirs(LOGS_DIRECTORY, exist_ok=True)\nos.makedirs(CONTEXT_DIR, exist_ok=True)\n\ndef setup_logger() -> logging.Logger:\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    current_date = datetime.now().strftime(\"%Y-%m-%d\")\n    log_file = f\"{LOGS_DIRECTORY}/{current_date}.log\"\n    \n    file_handler = logging.FileHandler(log_file)\n    file_handler.setLevel(logging.INFO)\n    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))\n    \n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(logging.ERROR)\n    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))\n    \n    logger.addHandler(file_handler)\n    logger.addHandler(console_handler)\n    \n    return logger\n\nlogger = setup_logger()\n\ndef read_file_content(file_path: str) -> Optional[str]:\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        logger.error(f\"File not found: {file_path}\")\n    except Exception as e:\n        logger.error(f\"Error reading file: {e}\")\n    return None\n\ndef write_to_file(file_path: str, content: str) -> None:\n    try:\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n        with open(file_path, 'w') as file:\n            file.write(content)\n        logger.info(f\"Content written to {file_path}\")\n    except Exception as e:\n        logger.error(f\"Error writing to file: {file_path}, {e}\")\n\ndef read_summary_of_context() -> List[Dict[str, str]]:\n    try:\n        with open(SUMMARY_FILE, 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        logger.info(\"Summary of context file not found, creating an empty file\")\n        write_summary_of_context([])\n        return []\n    except Exception as e:\n        logger.error(f\"Error reading summary of context: {e}\")\n        return []\n\ndef write_summary_of_context(summary: List[Dict[str, str]]) -> None:\n    try:\n        with open(SUMMARY_FILE, 'w') as file:\n            json.dump(summary, file, indent=2)\n        logger.info(\"Summary of context updated\")\n    except Exception as e:\n        logger.error(f\"Error writing summary of context: {e}\")\n\ndef get_directory_tree(root_dir: str) -> Dict[str, Any]:\n    try:\n        return {item: get_directory_tree(os.path.join(root_dir, item)) if os.path.isdir(os.path.join(root_dir, item)) else None\n                for item in os.listdir(root_dir)}\n    except Exception as e:\n        logger.error(f\"Error getting directory tree: {e}\")\n        return {}",
  "context_summary": [
    {
      "summary": "The script has been updated to extract terminal commands and AI responses from the JSON response and save them to separate files."
    },
    {
      "summary": "A new file called `utils.py` has been created to hold utility functions like file reading/writing, directory tree generation, and context summary handling."
    }
  ]
}
```