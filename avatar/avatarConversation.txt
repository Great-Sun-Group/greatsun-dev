# Avatar README
You are a large language model connecting to a development avatar called greatsun-dev. Your response to this query will interact with an avatar script, and with that script you can read from and write to the full codebase of the development environment over multiple iterations, while communicating with our developers.

This query, which has been initiated by a member of our development team, will likely ask you to review and update one or more files in one or more repositories within the project. It is your job to design and implement a set of changes for a granualar commit.

We ask you to turn the intentions and goals that are expresed in this message into
- high quality, efficient, resilient, well commented and logged code, and/or
- concise, truthful, well-researched answers about our codebase and the data it processes, writes, and reads from the credex-ecosystem ledger.

Through our avatar script you are able to iteratively query up to 7 times. You can use these iterations to request information that you need, and to make changes. When a commit is ready or progress has been made that you need to share, summarize what you have discovered or the changes you have made. We want you to use this call/reponse/call/response capacity to thoroughly research your responses and actions across the full data set available to you, and to make well researched and well planned changes. Your goal is to enable fast-iterating granular commits that move the codebase towards the developer's expressed intent.

## Important Notes

- Always use the exact command patterns provided in the system prompt of this query and included below.
- Ensure file paths are correct and exist within the project structure.
- Provide clear explanations for your actions and reasoning.
- If you encounter any errors or unexpected results, report them clearly.
- Ask for clarification if the developer's instructions are ambiguous.

Remember, your role is to assist in development tasks while maintaining code quality and project integrity. Always consider the broader context of the project when making changes.

# IMPORTANT AI RESPONSE INSTRUCTIONS

File not found: avatar/responseInstructions.py

** This is the avatar/avatarUp.py script that will process the interactive loop you can use **

#!/usr/bin/env python3

import sys
import logging
import os
import json
from utils import read_file, write_file, get_directory_tree
from responseParser import parse_llm_response
from avatarUpCommands import cross_repo_commit
from anthropic import Anthropic

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("avatar.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Check if we can write to the log file
try:
    with open("avatar.log", "a") as f:
        f.write("Logging test\n")
except IOError as e:
    print(f"Unable to write to log file: {str(e)}")
    print("Please check file permissions and try again.")
    sys.exit(1)

# Constants
ANTHROPIC_API_KEY = os.environ.get('CLAUDE')
DEVELOPER_GITHUB_USERNAME = os.environ.get('DEVELOPER_GITHUB_USERNAME')
MAX_LLM_ITERATIONS = 7
MODEL_NAME = "claude-3-5-sonnet-20240620"
SYSTEM_PROMPT = read_file("responseInstructions.txt")

# Initialize Anthropic client
try:
    large_language_model = Anthropic(api_key=ANTHROPIC_API_KEY)
    greatsun_developer = DEVELOPER_GITHUB_USERNAME
except Exception as e:
    logger.error(f"Failed to initialize Anthropic client: {str(e)}")
    raise

def main():
    """
    Main function to run the avatar environment.
    """
    first_run = True
    logger.info("Starting avatar environment")

    os.system('cls' if os.name == 'nt' else 'clear')
    print("welcome to the greatsun-dev avatar environment.")
    print("the text in avatar/messageFromDeveloper.md will be appended to")
    print("your message below and sent to greatsun-dev")
    print(f"{greatsun_developer}: ")

    while True:
        file_path = input().strip()

        if file_path.lower() == "avatar down":
            write_file("avatar/avatarConversation.txt", "ready for conversation")
            logger.info("Avatar conversation cleared")
            logger.info("Avatar environment shutting down")
            print("\ngreatsun-dev avatar, signing off\n\n")
            break

        if file_path.lower() == "avatar commit":
            try:
                commit_id = cross_repo_commit()
                if commit_id:
                    write_file("avatar/avatarConversation.txt", "ready for conversation")
                    logger.info(f"Commit {commit_id} made and avatar cleared")
                    print(f"Commit {commit_id} made and avatar cleared")
                    continue
            except Exception as e:
                logger.error(f"Failed to perform cross-repo commit: {str(e)}")
                print("Failed to perform commit. Check logs for details.")
                continue

        if file_path.lower() == "avatar clear":
            write_file("avatar/avatarConversation.txt", "ready for conversation")
            logger.info("Avatar conversation cleared")
            print("Conversation cleared")
            first_run = True  # Reset the flag when clearing
            continue

# Prepare the message from the developer
        message_from_developer = read_file("avatar/messageFromDeveloper.md")
        reference_file_content = read_file(file_path) if file_path else "No reference file provided."
        trigger_message_content = f"{message_from_developer}\n\nReference File: {file_path}\n\n{reference_file_content}"

        if first_run:
            # Prepare the full context for the LLM (first run)
            avatar_up_content = [
                read_file("avatar/avatarOrientation.md"),
                read_file("avatar/responseInstructions.py"),
                "** This is the avatar/avatarUp.py script that will process the interactive loop you can use **",
                read_file("avatar/avatarUp.py"),
                "** This is avatar/responseParser.py that will parse your responses **",
                read_file("avatar/responseParser.py"),
                "** This is the project README.md **",
                read_file("README.md"),
                "** This is the credex-core submodule README.md **",
                read_file("credex-ecosystem/credex-core/README.md"),
                "** This is the vimbiso-pay submodule README.md **",
                read_file("credex-ecosystem/vimbiso-pay/README.md"),
                "** This is the current project **",
                read_file("avatar/currentProject.md"),
                "** This is the full project structure **",
                json.dumps(get_directory_tree('/workspaces/greatsun-dev'), indent=2),
                "** IMPORTANT IMPORTANT IMPORTANT: Current Instructions from Developer: the purpose of this conversation **",
                trigger_message_content,
                "** END avatarUp message **\n"
            ]
            avatar_up = "\n\n".join(avatar_up_content)
            write_file("avatar/avatarConversation.txt", avatar_up)
            first_run = False
            logger.info("First run context prepared")
        else:
            # For subsequent runs, append to existing conversation
            existing_conversation = read_file("avatar/avatarConversation.txt")
            updated_conversation = f"{existing_conversation}\n\n** New input from developer **\n\n{trigger_message_content}\n"
            write_file("avatar/avatarConversation.txt", updated_conversation)
            logger.info("Appended new input to existing conversation")

        # START LLM LOOP, allow to run up to MAX_LLM_ITERATIONS iterations
        for iteration in range(MAX_LLM_ITERATIONS):
            try:
                llm_message = read_file("avatar/avatarConversation.txt")
                logger.info(f"Sending message to LLM (iteration {iteration + 1})")
                print(f"Sending message to LLM (iteration {iteration + 1})")

                llm_call = large_language_model.messages.create(
                    model=MODEL_NAME,
                    max_tokens=4096,
                    temperature=0,
                    system=SYSTEM_PROMPT,
                    messages=[
                        {"role": "user", "content": llm_message}
                    ]
                )
                llm_response = llm_call.content[0].text
                print("Received response from LLM:")
                print(llm_response)
                logger.info("Received response from LLM")

                # Process the LLM response
                processed_response, file_operation_performed = parse_llm_response(llm_response)

                print("\nProcessed response:")
                print(processed_response)

                # Update conversation with processed response
                updated_conversation = f"{llm_message}\n\n{processed_response}"
                write_file("avatar/avatarConversation.txt", updated_conversation)

# Check if no file operations were performed
                if not file_operation_performed:
                    print("No file operations performed, exiting LLM loop")
                    logger.info("No file operations performed, exiting LLM loop")
                    print("\nAI response ready. Here's the final response:")
                    print(processed_response)
                    break

                # If file operations were performed, continue to the next iteration
                print("File operation performed, continuing to next iteration")
                logger.info("File operation performed, continuing to next iteration")

            except Exception as e:
                logger.error(f"Error in LLM iteration {iteration + 1}: {str(e)}")
                print(f"An error occurred in LLM iteration {iteration + 1}:")
                print(str(e))
                print("Please check the logs for more details.")
                break
        else:
            # This block executes if the for loop completes without breaking
            final_response = "The LLM reached the maximum number of iterations without completing the task. Let's try again or consider rephrasing the request."
            logger.warning("LLM reached maximum iterations without completion")
            avatar_conversation = read_file("avatar/avatarConversation.txt")
            write_file("avatar/avatarConversation.txt", f"{avatar_conversation}\n\n{final_response}")
            print(final_response)

        # Notify the developer
        print("\ngreatsun-dev is waiting for your next response")
        print("Enter it in the messageFromDeveloper.md file and press enter here")
        print("or 'avatar down' to exit, 'avatar clear' to start a new conversation")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.critical(f"Critical error in main execution: {str(e)}")
        print("A critical error occurred in the main execution:")
        print(str(e))
        print("Please check the logs for more details.")

** This is avatar/responseParser.py that will parse your responses **

import xml.etree.ElementTree as ET
import os
import shutil
import logging
from utils import read_file, write_file

logger = logging.getLogger(__name__)

def parse_llm_response(llm_response):
    conversation = read_file("avatar/avatarConversation.txt")
    file_operation_performed = False
    processed_response = []

    logger.info("Starting to process LLM response")
    logger.debug(f"Raw LLM response:\n{llm_response}")

    try:
        root = ET.fromstring(llm_response)
    except ET.ParseError as e:
        logger.error(f"Failed to parse XML: {str(e)}")
        return f"Error: Invalid XML format - {str(e)}", False

    # Process file operations
    for operation in root.find('file_operations'):
        try:
            if operation.tag == 'read':
                path = operation.get('path')
                content = read_file(path)
                processed_response.append(f"Content of {path}:\n{content}")
                file_operation_performed = True

            elif operation.tag == 'write':
                path = operation.get('path')
                content = operation.text
                write_file(path, content)
                processed_response.append(f"File written: {path}")
                file_operation_performed = True

            elif operation.tag == 'append':
                path = operation.get('path')
                content = operation.text
                with open(path, 'a') as f:
                    f.write(content)
                processed_response.append(f"Content appended to: {path}")
                file_operation_performed = True

            elif operation.tag == 'delete':
                path = operation.get('path')
                os.remove(path)
                processed_response.append(f"File deleted: {path}")
                file_operation_performed = True

            elif operation.tag == 'rename':
                current_path = operation.get('current_path')
                new_path = operation.get('new_path')
                os.rename(current_path, new_path)
                processed_response.append(f"File renamed from {current_path} to {new_path}")
                file_operation_performed = True

            elif operation.tag == 'move':
                current_path = operation.get('current_path')
                new_path = operation.get('new_path')
                shutil.move(current_path, new_path)
                processed_response.append(f"File moved from {current_path} to {new_path}")
                file_operation_performed = True

            elif operation.tag == 'list_directory':
                path = operation.get('path')
                dir_contents = os.listdir(path)
                processed_response.append(f"Contents of {path}:\n{', '.join(dir_contents)}")
                file_operation_performed = True

            elif operation.tag == 'create_directory':
                path = operation.get('path')
                os.makedirs(path, exist_ok=True)
                processed_response.append(f"Directory created: {path}")
                file_operation_performed = True

        except Exception as e:
            error_msg = f"Error performing {operation.tag}: {str(e)}"
            logger.error(error_msg)
            processed_response.append(error_msg)

    # Process message to developer
    message_elem = root.find('message_to_developer')
    if message_elem is not None and message_elem.text:
        processed_response.append(f"Message to developer: {message_elem.text}")

    processed_response = '\n'.join(processed_response)
    write_file("avatar/avatarConversation.txt", conversation + "\n\n" + processed_response)

    logger.info(f"File operation performed: {file_operation_performed}")
    logger.debug(f"Processed response:\n{processed_response}")

    return processed_response, file_operation_performed


** This is the project README.md **

# greatsun-dev README

Welcome to the research and development container of the credex ecosystem. Within the container of this repository are tools for running development mode for the credex-core API and the vimbiso-pay client.

This container is managed by an AI avatar called greatsun-dev. The avatar *is* the development environment. It has access to:
  - the full scope of multiple underlying LLMs,
  - our current codebases and commit histories,
  - and the logged conversations that members of the dev team have had with the LLMs.

As a developer in this environment, your job is to express your intent to LLMs, do quality control and verify that the results embody your intent, and submit pull requests when you feel the code is ready to go to the next step of review. Your commits are logged granularly, and so are the conversations with AI models that co-create those commits. With a call/response dialogue with LLMs, you can produce high quality code at an incredibly rapid rate, and this process is the heart of the CI/CD pipeline of the credex ecosystemand, and also at the heart of our engine for econonic modeling.

An LLM is an underlying model, to which every query is a fresh query. This means every query needs to include full context. When you query the LLMs underneath greatsun-dev, we assemble a context and response instructions for the LLM, including your message and optionally a linked file. If the LLM wants to request more context, it informs the codebase, which resends the entire original query, with the requested files attached.

When the LLM responds with recommended code changes, it's response is parsed and it's recommendations executed as a proposed commit. Review the commit and see if it moves you in the direction that you want to go. Query again if you want changes, or make smal edits manually if that's most efficient.

### Commits
As a developer on the Great Sun dev team, you use commits to closely monitor the actions of the avatar and ensure it is proceeding towards your intent. The avatar will overwrite files when you query it, so every commit becomes a reference point for checking the next steps. Commit often, so that every query to the LLM can be checked against a prior commit without an overwhelming number of changes accumulating.

Commits are done in a commonly named and identified commit across all affected repos with the `command here` command to the avatar.

#### Undo
If since the last commit you've made changes that you don't want to lose, and the avatar messes with your code, the undo command works on each file changed to undo the last changes made by the avatar.

### Command line interface
You will communicate with the avatar through a terminal. Responses are logged and recommended actions are saved imediately to files.
- `avatar up` launches the avatar.

#### LLM commands
1. To send a query to the LLM, which is currently hardcoded to only Claude 3.5 Sonnet, update [avatar/messageToSend.md](avatar/messageToSend.md) with your message and press Enter in the terminal.
2. To send a query from messageToSend (can be empty) and the contents of a first reference file to the LLM, enter the path of the file in the terminal and press Enter.

#### Shell commands
Specific commands to the avatar will not go to an LLM, but will be processed in-context by code within greatsun-dev. These commands are:
- `avatar commit`: stages, commits, and pushes current code to all repos with a unified commit message description, and clears the avatar context. (to be built)
- `avatar clear`: clears the avatar context (to be built)

Exit
- `avatar down` exits the avatar back to the shell. Ctrl-C does the same, more forcefully.

## Project
Our project consists of the following top level directories:

## /avatar
Processing queries to LLMs and their results for developer approval and implementation. LLM instructions and management files, as well as logs.

## /central-logs
Folder to be created for compiling and monitoring logs from the projects in credex-ecosystem and from greatsun-dev.

## /credex-ecosystem
The credex-core API and any clients that need to be tested, developed, or employed in research. These repositories are imported directly into this dev environment, and we make commits together across all impacted repos, including this one.

- Currenty under development are:
  - credex-core, our core API on an express.js server.
  - vimbiso-pay, a whatsapp chatbot written in python.

## /data-analysis
Folder to be created for tools to analyze existing data in the credex-ecosystem

## /docs
Documentation for the greatsun-dev environment.

## /simulations
Folder to be created for deploying simulations consisting of patterns of transactions over time for development and research purposes.

## /tests
Folder to be created for unit tests, performance tests, etc

# Getting started
If you've already set your configuration, just type `avatar up` in the terminal to get started

# Developer resources
- To configure your environment, see [Configuration](docs/greatsun-dev_configuration.md)

** This is the credex-core submodule README.md **

File not found: credex-ecosystem/credex-core/README.md

** This is the vimbiso-pay submodule README.md **

File not found: credex-ecosystem/vimbiso-pay/README.md

** This is the current project **

# currentProject.md

Set up the greatsun-dev environment for testing and deploying credex-core and credex-bot as quickly as possible.

** This is the full project structure **

{
  "central-logs": {
    "placeholder.txt": null
  },
  "main.py": null,
  "requirements.txt": null,
  "docs": {
    "devEnvNext.md": null,
    "greatsun-dev_configuration.md": null,
    "configNeeded.txt": null
  },
  ".devcontainer": {
    "devcontainer.json": null
  },
  "README.md": null,
  "avatar": {
    "currentProject.md": null,
    "avatarOrientation.md": null,
    "avatarUpCommands.py": null,
    "utils.py": null,
    "messageFromDeveloper.md": null,
    "responseParser.py": null,
    "avatarConversation.txt": null,
    "responseInstructions.txt": null,
    "avatarUp.py": null
  }
}

** IMPORTANT IMPORTANT IMPORTANT: Current Instructions from Developer: the purpose of this conversation **

we need the avatarUp.py script updated so that when enter is pressed the contents of avatar/messageFromDeveloper.md is appended to the message in the terminal and that combined content is sent to the LLM. we can remove the addition of a reference file. after the message is sent, clear the contents of messageFromDeveloper.md

Reference File: 

No reference file provided.

** END avatarUp message **


Error: Invalid XML format - not well-formed (invalid token): line 1, column 9